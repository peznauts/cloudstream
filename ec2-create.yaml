---
- name: Gather facts
  hosts: localhost
  gather_facts: true
  connection: local

- name: Create an rtmpServer
  hosts: localhost
  gather_facts: false
  connection: local
  vars_files:
    - vars/ec2-vars.yaml

  pre_tasks:
    - name: Create key pair
      amazon.aws.ec2_key:
        name: "{{ ec2_keypair }}"
        key_material: "{{ lookup('file', ansible_env.HOME ~ '/.ssh/id_rsa.pub') }}"
    - name: create a new ec2 VPC
      ec2_vpc_net:
        name: "{{ ec2_vpc_name }}"
        cidr_block: "{{ ec2_vpcCidrBlock }}"
        region: "{{ ec2_region }}"
        dns_support: true  # enable dns support
        dns_hostnames: true  # enable dns hostnames
        tenancy: default
        state: "{{ ec2_state }}"
      register: ec2_vpc_net_result
    - name: create ec2 vpc internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ ec2_region }}"
        state: "{{ ec2_state }}"
        tags:
          Name: "{{ ec2_igw_name }}"
      register: igw_result
    - debug: var=igw_result
    - name: create ec2 vpc subnet
      ec2_vpc_subnet:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ ec2_region }}"
        az: "{{ ec2_zone }}"  # az is the availability zone
        state: "{{ ec2_state }}"
        cidr: "{{ ec2_subNetCidrBlock }}"
        map_public: true  # enable public ip
        resource_tags:
          Name: "{{ ec2_subnet_name }}"
      register: subnet_result
    - name: Ensure routes are in place
      ec2_vpc_route_table:
          vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
          region: "{{ ec2_region }}"
          tags:
            Name: Public
          subnets:
            - "{{ subnet_result.subnet.id }}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw_result.gateway_id }}"
    - name: create ec2 security group
      ec2_group:
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ ec2_region }}"
        state: "{{ ec2_state }}"
        name: "{{ ec2_security_group_name }}"
        description: "{{ ec2_security_group_name }}"
        rules:
        - proto: tcp
          ports:
          - 22
          cidr_ip: "{{ ec2_allowPortCidrBlock }}"
          rule_desc: allow all on port 22
        - proto: tcp
          ports:
          - 1935
          cidr_ip: "{{ ec2_allowPortCidrBlock }}"
          rule_desc: allow all on port 1935
      register: security_group_results
  tasks:
    - name: Gather information about any instance with a tag key Name and value Example
      ec2_instance_info:
        filters:
          "tag:Name": rtmpServer
      register: ec2

    - debug: var=ec2

    - name: Create the rtmp server
      amazon.aws.ec2:
        region: "{{ ec2_region }}"
        key_name: "{{ ec2_keypair }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        state: "{{ ec2_state }}"
        group: rtmpSecurityGroup
        wait: true
        count: 1
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        assign_public_ip: true
        instance_tags:
          Name: rtmpServer
      register: ec2

    - debug: var=ec2

- name: Create an rtmpServer
  hosts: streamerTarget
  gather_facts: false
  tasks:
    - name: Install required packages
      package:
        name:
          - nginx
          - stunnel
          - iptraf-ng

    - name: Create stunnel config
      copy:
        content: |
          [fb-live]
          client = yes
          accept = 127.0.0.1:19350
          connect = live-api-s.facebook.com:443
          verifyChain = no
        dest: /etc/stunnel/stunnel.conf
      become: true

    - name: Create NGINX config
      blockinfile:
        path: /etc/nginx/nginx.conf
        block: |
          rtmp {}