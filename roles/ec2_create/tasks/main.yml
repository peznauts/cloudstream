# CloudStream Copyright (C) 2020  Kevin Carter

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

---

- name: Set python interpreter fact
  set_fact:
    ansible_python_interpreter: "{{ local_python_interpreter }}"
  when:
    - local_python_interpreter is defined

- name: Create key pair
  amazon.aws.ec2_key:
    name: "{{ ec2_keypair }}"
    key_material: "{{ lookup('file', ansible_env.HOME ~ '/.ssh/id_rsa.pub') }}"

- name: create a new ec2 VPC
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_vpc_name }}"
    cidr_block: "{{ ec2_vpcCidrBlock }}"
    region: "{{ ec2_region }}"
    dns_support: true  # enable dns support
    dns_hostnames: true  # enable dns hostnames
    tenancy: default
    state: "{{ ec2_state }}"
  register: ec2_vpc_net_result

- name: create ec2 vpc internet gateway
  community.aws.ec2_vpc_igw:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ ec2_region }}"
    state: "{{ ec2_state }}"
    tags:
      Name: "{{ ec2_igw_name }}"
  register: igw_result

- name: Create ec2 vpc subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ ec2_region }}"
    az: "{{ ec2_zone }}"  # az is the availability zone
    state: "{{ ec2_state }}"
    cidr: "{{ ec2_subNetCidrBlock }}"
    map_public: true  # enable public ip
    resource_tags:
      Name: "{{ ec2_subnet_name }}"
  register: subnet_result

- name: Ensure routes are in place
  community.aws.ec2_vpc_route_table:
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ ec2_region }}"
      tags:
        Name: Public
      subnets:
        - "{{ subnet_result.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw_result.gateway_id }}"

- name: create ec2 security group
  amazon.aws.ec2_group:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ ec2_region }}"
    state: "{{ ec2_state }}"
    name: "{{ ec2_security_group_name }}"
    description: "{{ ec2_security_group_name }}"
    rules:
    - proto: tcp
      ports:
      - 22
      cidr_ip: "{{ ec2_allowPortCidrBlock }}"
      rule_desc: allow all on port 22
    - proto: tcp
      ports:
      - 1935
      cidr_ip: "{{ ec2_allowPortCidrBlock }}"
      rule_desc: allow all on port 1935
  register: security_group_results

- name: Gather information about any instance with a tag key Name and value Example
  community.aws.ec2_instance_info:
    filters:
      "tag:Name": rtmpServer
  register: ec2

- name: Create the rtmp server
  amazon.aws.ec2:
    region: "{{ ec2_region }}"
    key_name: "{{ ec2_keypair }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_image }}"
    state: "{{ ec2_state }}"
    group: rtmpSecurityGroup
    wait: true
    count: 1
    vpc_subnet_id: "{{ subnet_result.subnet.id }}"
    assign_public_ip: true
    instance_tags:
      Name: rtmpServer
  register: ec2

- name: Add instance to dynamic group
  add_host:
    hostname: "{{ item.id }}"
    ansible_host: "{{ item.public_ip }}"
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_user: ubuntu
    ansible_python_interpreter: /usr/bin/python3
    groups:
    - streamerTarget
  loop: "{{ ec2.instances }}"

- name: Wait for ssh to come up
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    delay: 10
    timeout: 300
  loop: "{{ ec2.instances }}"
